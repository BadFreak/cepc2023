#include "EBUdecode.h"
#include <fstream>
#include <iostream>
#include <algorithm>
#include "Rtypes.h"
#include <TMath.h>

using namespace std;
// scintillator strips wrt. 6 SPIROC2E chips * 36 channels
double* EBUdecode(int LayerIDs, int ChipIDs, int ChannelIDs)
{
	// static const int layerNu = 32;
	static const int chipNu = 6;
	static const int chnNu = 36;
	int decodeID[chipNu][chnNu] = { 0, 42, 1, 43, 2, 44, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 54, 13, 55, 14, 56, 15, 57, 16, 58, 17, 59, 18, 60, 19, 61, 20, 62, 21, 22, 23,
									24, 66, 25, 67, 26, 68, 27, 69, 28, 70, 29, 71, 30, 72, 31, 73, 32, 74, 33, 75, 34, 76, 35, 77, 36, 78, 37, 79, 38, 80, 39, 81, 40, 82, 41, 83,
									149, 148, 147, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 63, 64, 65, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
									150, 192, 151, 193, 152, 194, 153, 195, 154, 196, 155, 197, 156, 198, 157, 199, 158, 200, 159, 201, 160, 202, 161, 203, 162, 204, 163, 205, 164, 206, 165, 207, 166, 208, 167, 209,
									191, 190, 189, 188, 146, 187, 145, 186, 144, 185, 143, 184, 142, 183, 141, 182, 140, 181, 139, 180, 138, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 128, 169, 127, 168, 126,
									137, 136, 135, 134, 133, 132, 131, 130, 129, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 45, 46, 47, 48, 49, 50, 51, 52, 53, 210, 210, 210, 210, 210, 210 };

	int ScintillatorIDs = decodeID[ChipIDs][ChannelIDs];
	double layerZ;

	const double _xInterval = 5.3;	// 300 um gap in width direction
	const double _yInterval = 45.4; // 400 um gap in length direction
	const int rowNu = 42;
	const int columnNu = 5;
	int _xID = ScintillatorIDs % rowNu; // 0-41
	int _yID = ScintillatorIDs / rowNu; // 0-4
	static double _position[3] = { 0 };
	double x0 = _xInterval * _xID - _xInterval * (rowNu - 1) / 2.;//42 position
	double y0 = _yInterval * _yID - _yInterval * (columnNu - 1) / 2.;//5 position

	// for prototype test
	if (LayerIDs % 2 == 0) {
		_position[0] = -y0;
		_position[1] = -x0;
	}
	if (LayerIDs % 2 == 1) {
		_position[0] = -x0;
		_position[1] = -y0;
	}
	if (LayerIDs % 2 == 0)
		layerZ = 1 + LayerIDs / 2 * 19.9;
	//else layerZ = 12.95+(LayerIDs-1)/2*19.9;
	else
		layerZ = 12.2 + (LayerIDs - 1) / 2 * 19.9;
	_position[2] = layerZ;
	// for grouped CR test
	// if(LayerIDs%4==0) {
	//     _position[0] = -y0;
	//     _position[1] = -x0;
	// }
	// if(LayerIDs%4==1) {
	//     _position[0] = x0;
	//     _position[1] = y0;
	// }
	// if(LayerIDs%4==2) {
	//     _position[0] = y0;
	//     _position[1] = x0;
	// }
	// if(LayerIDs%4==3) {
	//     _position[0] = -x0;
	//     _position[1] = -y0;
	// }
	// _position[2] = layerZ[LayerIDs];

	return _position;
}

double tempReconstruction(int LayerID, double* position, vector<double> tempSensor)
{
	double localTemperature;
	const int sensorNo = 16;
	double posX[sensorNo] = { 39.5986, -106.197, 89.9922, -22.1234, -103.886, -0.508, -60.2488, 59.1312, 28.2702, -50.3428, 100.99, -106.68, -106.299, 105.918, -47.0916, 53.2638 };
	double posY[sensorNo] = { -34.3916, -34.0868, -11.1506, -13.1064, 8.0772, 7.366, 34.5186, 33.7312, 54.0766, 75.819, 101.473, 101.498, -101.752, -102.032, -70.6882, -70.3326 };
	double sum = 0;
	double length = 0;
	double x, y;
	for (int g = 0; g < sensorNo; g++) {
		if (LayerID % 2 == 0) {
			x = -posY[g];
			y = -posX[g];
		}
		if (LayerID % 2 == 1) {
			x = -posX[g];
			y = -posY[g];
		}
		length = std::sqrt(std::pow((*position - x), 2) + std::pow((*(position + 1) - y), 2));
		sum += 1 / length;
	}
	for (int g = 0; g < sensorNo; g++) {
		if (LayerID % 2 == 0) {
			x = -posY[g];
			y = -posX[g];
		}
		if (LayerID % 2 == 1) {
			x = -posX[g];
			y = -posY[g];
		}
		//if(LayerID%2==0) {x = posY[g]; y = -posX[g];}
		//if(LayerID%2==1) {x = -posX[g]; y = posY[g];}
		length = std::sqrt(std::pow((*position - x), 2) + std::pow((*(position + 1) - y), 2));
		double weight = 1 / length / sum;
		localTemperature += weight * tempSensor[g];
	}
	return localTemperature;
}

bool IsDeadChannel(int cellid)
{
	vector<int> pedestalDead =	
		{
			910021, 1300008, 2200018
		};
	vector<int> hlratioDead =	
		{
			30028, 50003, 50004, 140015, 200007, 230032, 240018, 250000, 300008, 410012, 
			430035, 440030, 440034, 500000, 500022, 510035, 520003, 530033, 630019, 630021, 
			630025, 730027, 730031, 730034, 830019, 830023, 830033, 840035, 850019, 900015, 
			930033, 1020002, 1020024, 1100000, 1120034, 1130029, 1220024, 1220026, 1240028, 1250001, 
			1250002, 1330017, 1330019, 1430025, 1440017, 1500000, 1500002, 1530000, 1530030, 1540011, 
			1540035, 1610005, 1620016, 1630019, 1630029, 1630031, 1650010, 1700003, 1710009, 1730027,
			1750021, 1810011, 1810015, 1850010, 1910030, 1910032, 2000017, 2010035, 2020006, 2030033,
			2100000, 2100002, 2110027, 2110032, 2130002, 2230029, 2240009, 2330027, 2330029, 2330031,
			2500014, 2510035, 2530027, 2530034, 2530035, 2610004, 2630031, 2630033, 2700009, 2730032,
			2730034, 2800021, 2800032, 2810025, 2810029, 2820006, 2820026, 2830031, 2840015, 2840023,
			2920023, 2930019, 2950012, 3010023, 3030027, 3050015, 3130018
		};
	vector<int> mipDead =
		{
10030, 10031, 10032, 10033, 10034, 10035, 20033, 20034, 20035, 30028, 30030, 30031, 30032, 30033, 30034, 30035, 40030, 40032, 40034, 40035, 50003, 50004, 110034, 130035, 140015, 140034, 200007, 210030, 210031, 210032, 210033, 210034, 210035, 220033, 220034, 220035, 230030, 230031, 230032, 230033, 230034, 230035, 240018, 240034, 240035, 250000, 300008, 340034, 410012, 410028, 410029, 410030, 410031, 410032, 410033, 410034, 410035, 420033, 420034, 420035, 430025, 430028, 430029, 430030, 430031, 430032, 430033, 430034, 430035, 440024, 440026, 440029, 440030, 440032, 440033, 440034, 440035, 500022, 510034, 510035, 520003, 520035, 530025, 530031, 530033, 530034, 530035, 540032, 540034, 540035, 610029, 610030, 610031, 610032, 610033, 610034, 610035, 620033, 620034, 620035, 630013, 630019, 630021, 630028, 630029, 630030, 630031, 630032, 630033, 630034, 630035, 640024, 640026, 640027, 640028, 640029, 640030, 640032, 640033, 640034, 640035, 710032, 710034, 730009, 730011, 730025, 730027, 730029, 730031, 730033, 730035, 740034, 800012, 810023, 810027, 810029, 810030, 810031, 810032, 810033, 810034, 810035, 820033, 820034, 820035, 830029, 830030, 830031, 830032, 830033, 830034, 830035, 840024, 840027, 840028, 840029, 840030, 840032, 840033, 840034, 840035, 850019, 900015, 910004, 910034, 920025, 930025, 930027, 930029, 930031, 930033, 930035, 940034, 1010027, 1010028, 1010029, 1010030, 1010031, 1010032, 1010033, 1010034, 1010035, 1020002, 1020024, 1020033, 1020034, 1020035, 1030028, 1030029, 1030030, 1030031, 1030032, 1030033, 1030034, 1030035, 1040026, 1040029, 1040030, 1040032, 1040033, 1040034, 1040035, 1110030, 1110032, 1110034, 1130003, 1130005, 1130009, 1130025, 1130027, 1130029, 1130031, 1130033, 1130034, 1130035, 1140032, 1140034, 1210027, 1210029, 1210030, 1210031, 1210032, 1210033, 1210034, 1210035, 1220024, 1220026, 1220033, 1220034, 1220035, 1230023, 1230025, 1230029, 1230030, 1230031, 1230032, 1230033, 1230034, 1230035, 1240013, 1240015, 1240026, 1240027, 1240028, 1240029, 1240030, 1240032, 1240033, 1240034, 1240035, 1250001, 1250002, 1310032, 1310034, 1330017, 1330019, 1330027, 1330033, 1330035, 1340034, 1340035, 1400020, 1410013, 1410019, 1410021, 1410023, 1410025, 1410027, 1410028, 1410029, 1410030, 1410031, 1410032, 1410033, 1410034, 1410035, 1420033, 1420034, 1420035, 1430019, 1430021, 1430023, 1430025, 1430029, 1430030, 1430031, 1430032, 1430033, 1430034, 1430035, 1440002, 1440009, 1440011, 1440017, 1440021, 1440024, 1440025, 1440026, 1440027, 1440028, 1440029, 1440030, 1440032, 1440033, 1440034, 1440035, 1510032, 1510034, 1530000, 1530023, 1530025, 1530027, 1530029, 1530031, 1530033, 1530034, 1530035, 1540011, 1540032, 1540034, 1610005, 1610025, 1610027, 1610029, 1610030, 1610031, 1610032, 1610033, 1610034, 1610035, 1620016, 1620033, 1620034, 1620035, 1630029, 1630030, 1630031, 1630032, 1630033, 1630034, 1630035, 1640028, 1640034, 1650010, 1700003, 1710009, 1710032, 1710034, 1730027, 1730031, 1730033, 1730035, 1740034, 1750021, 1810011, 1810015, 1810029, 1810030, 1810031, 1810032, 1810033, 1810034, 1810035, 1820033, 1820034, 1820035, 1830027, 1830028, 1830029, 1830030, 1830031, 1830032, 1830033, 1830034, 1830035, 1840026, 1840027, 1840029, 1840030, 1840032, 1840033, 1840034, 1840035, 1850010, 1910030, 1910032, 1910034, 1910035, 1930025, 1930027, 1930031, 1930033, 1930035, 1940032, 1940034, 1940035, 2010027, 2010028, 2010029, 2010030, 2010031, 2010032, 2010033, 2010034, 2010035, 2020006, 2020033, 2020034, 2020035, 2030017, 2030019, 2030029, 2030030, 2030031, 2030032, 2030033, 2030034, 2030035, 2040023, 2040024, 2040026, 2040027, 2040028, 2040029, 2040030, 2040032, 2040033, 2040034, 2040035, 2050009, 2100002, 2110027, 2110032, 2130002, 2130025, 2130027, 2130029, 2130031, 2130033, 2130035, 2140034, 2210029, 2210030, 2210031, 2210032, 2210033, 2210034, 2210035, 2220033, 2220034, 2220035, 2230028, 2230030, 2230031, 2230032, 2230033, 2230034, 2230035, 2240009, 2240032, 2240035, 2300025, 2310030, 2330025, 2330027, 2330029, 2330031, 2330033, 2330035, 2340034, 2410029, 2410030, 2410031, 2410032, 2410033, 2410034, 2410035, 2420015, 2420033, 2420034, 2420035, 2430029, 2430030, 2430031, 2430032, 2430033, 2430034, 2430035, 2440035, 2500014, 2510030, 2510032, 2510034, 2510035, 2530019, 2530021, 2530025, 2530027, 2530029, 2530031, 2530032, 2530033, 2530034, 2530035, 2540034, 2540035, 2610004, 2610027, 2610029, 2610030, 2610031, 2610032, 2610033, 2610034, 2610035, 2620033, 2620034, 2620035, 2630028, 2630029, 2630030, 2630031, 2630032, 2630033, 2630034, 2630035, 2640030, 2640032, 2640034, 2640035, 2700009, 2710034, 2730029, 2730031, 2730033, 2730034, 2730035, 2740034, 2800021, 2800032, 2810025, 2810029, 2810030, 2810031, 2810032, 2810033, 2810034, 2810035, 2820006, 2820026, 2820033, 2820034, 2820035, 2830030, 2830031, 2830032, 2830033, 2830034, 2830035, 2840015, 2840023, 2920023, 2930019, 2940034, 2950012 
		};
	auto it_ped = find(pedestalDead.begin(),pedestalDead.end(),cellid); 
	auto it_hlratio = find(hlratioDead.begin(),hlratioDead.end(),cellid); 
	auto it_mip = find(mipDead.begin(),mipDead.end(),cellid);
	if(it_ped==pedestalDead.end() && it_hlratio==hlratioDead.end() && it_mip==mipDead.end()) return false;
	else return true;

}
