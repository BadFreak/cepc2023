#include<fstream>
#include<iostream>
#include<TFile.h>
#include<TTree.h>
#include<vector>
#include<TROOT.h>
#include<TStyle.h>
#include<TProfile.h>
#include<TMath.h>
#include<TRandom.h>
#include "Calibration.h"
#include "EBUdecode.h"
#include "Extract.h"
#include <TF1.h>
#include <TKey.h>
#include <TGraphErrors.h>

/*
double processCali::SaturationCorrection(double ADC, int size)
{
	const int NPixel10 = 9426;
	const int NPixel15 = 4200; // jiaxuan: not exactly
	double NFired,NSeed;
	const double Gain10 = 14;// ADC per p.e.
	const double Gain15 = 22.7;// ADC per p.e.
	if(size==10)
	{
		NFired = ADC / Gain10;
		NSeed = - NPixel10 * log( (NPixel10-NFired) / NPixel10 );
		ADC = NSeed * Gain10;
	}
	else if(size==15)
	{
		NFired = ADC / Gain15;
		NSeed = - NPixel15 * log( (NPixel15-NFired) / NPixel15 );
		ADC = NSeed * Gain15;
	}
	else 
		return 0.0;
	return ADC;
}
*/

void processCali::Reset()
{	
	if(_cellID_new.size()) 	_cellID_new.clear();
	if(_hitE.size())		_hitE.clear();
	if(_posx.size())		_posx.clear();
	if(_posy.size())		_posy.clear();
	if(_posz.size())		_posz.clear();
    if(_temp.size()) _temp.clear();
}

void processCali::DataClear()
{
	if(_XPOS.size()) 	_XPOS.clear();
	if(_YPOS.size()) 	_YPOS.clear();
	if(_ZPOS.size()) 	_ZPOS.clear();
	if(_HADC.size()) 	_HADC.clear();
	if(_Layer.size()) 	_Layer.clear();
	if(_Chip.size()) 	_Chip.clear();
	if(_Channel.size()) _Channel.clear();
}

int processCali::TreeType(string inFileName)
{
	int treeType = -1;
	inFile = TFile::Open(TString(inFileName),"READ");
    TIter next(inFile->GetListOfKeys());
	TKey *key;
	while ((key = (TKey*)next())) {
		if (strcmp(key->GetClassName(), "TTree") == 0) { 
			inTree = (TTree*)inFile->Get(key->GetName()); 
			cout << "Tree name: " << inTree->GetName() << endl;
			if (strcmp(inTree->GetName(), "Raw_Hit") == 0)  {
				treeType = 0; // data 
			} 
			if (strcmp(inTree->GetName(), "Simu_Digi_Raw_Hit") == 0)  {
				treeType = 1; // simu_digi
			}
		}
	}
	return treeType;
	inFile->Close();
}

void processCali::MuonTrackFit(int entry)
{
	gErrorIgnoreLevel = kFatal;
	gStyle->SetOptFit(1111);
	const double zerr = 1; // mm
	const double xerr = 2.5; // mm
	const double yerr = 2.5; // mm
	
	TF1 * lineXZ = new TF1("f1","pol1",0,300);
	TF1 * lineYZ = new TF1("f1","pol1",0,300);
	TGraphErrors* posXZ = new TGraphErrors();
	TGraphErrors* posYZ = new TGraphErrors();
	
	int i_XZ = 0;
	int i_YZ = 0;
	double averX = 0;
	double averY = 0;
	int allHitInOneEvent = _ZPOS.size();
	for(size_t i_pos = 0; i_pos < _ZPOS.size(); i_pos++)
	{
		if ( _Layer.at(i_pos)%2 == 1 ) { 
			posXZ->SetPoint(i_XZ, _ZPOS.at(i_pos), _XPOS.at(i_pos));
			posXZ->SetPointError(i_XZ, zerr, xerr);
			averX += _XPOS.at(i_pos); 
			i_XZ++;
		} else {
			posYZ->SetPoint(i_YZ, _ZPOS.at(i_pos), _YPOS.at(i_pos));
			posYZ->SetPointError(i_YZ, zerr, yerr);
			averY += _YPOS.at(i_pos);
			i_YZ++;
		}
	}
	averX /= i_XZ; averY /= i_YZ;
	//cout << "i_XZ : i_YZ " << i_XZ << " " << i_YZ << endl; 
	
	delete posYZ;
	delete posXZ;
	posXZ = new TGraphErrors();
	posYZ = new TGraphErrors();

	//////////////////////////////////////////////////////
	// 						fit first time 
	//////////////////////////////////////////////////////
	int i_Raw = 0;
	int i_XZ_Raw = 0;
	int i_YZ_Raw = 0;
	int cycle = 0 ;
	double firstThre = 40;
	while (cycle < allHitInOneEvent) 
	{
		cycle++;
		double residualXZ = _XPOS.at(i_Raw) - averX;
		double residualYZ = _YPOS.at(i_Raw) - averY;
		if ( _Layer.at(i_Raw)%2 == 1 ) {
			//cout << "layer : residualXZ " << _Layer.at(i_Raw) << residualXZ << endl;
			if (fabs(residualXZ) < firstThre) {
				posXZ->SetPoint(i_XZ_Raw, _ZPOS.at(i_Raw), _XPOS.at(i_Raw));
				posXZ->SetPointError(i_XZ_Raw, zerr, xerr);
				i_XZ_Raw++;
			} else {
				//cout << "====>Deleting ... " << fixed << setprecision(1) << " " <<_Layer.at(i_Raw) << " " <<_ZPOS.at(i_Raw) << " " <<_XPOS.at(i_Raw) <<  " " <<_YPOS.at(i_Raw) << endl; 
				_XPOS.erase(_XPOS.begin() + i_Raw);
				_YPOS.erase(_YPOS.begin() + i_Raw);
				_ZPOS.erase(_ZPOS.begin() + i_Raw);
				_HADC.erase(_HADC.begin() + i_Raw);
				_Layer.erase(_Layer.begin() + i_Raw);
				_Chip.erase(_Chip.begin() + i_Raw);
				_Channel.erase(_Channel.begin() + i_Raw);
				i_Raw--;
			}
		} else {
			//cout << "layer : residualYZ " << _Layer.at(i_Raw) << " " <<  residualYZ << endl;
			if (fabs(residualYZ) < firstThre) {
				posYZ->SetPoint(i_YZ_Raw, _ZPOS.at(i_Raw), _YPOS.at(i_Raw));
				posYZ->SetPointError(i_YZ_Raw, zerr, yerr);
				i_YZ_Raw++;
			} else {
				//cout << "====>Deleting ... " << fixed << setprecision(1) << " " <<_Layer.at(i_Raw) << " " <<_ZPOS.at(i_Raw) << " " <<_XPOS.at(i_Raw) <<  " " <<_YPOS.at(i_Raw) << endl; 
				_XPOS.erase(_XPOS.begin() + i_Raw);
				_YPOS.erase(_YPOS.begin() + i_Raw);
				_ZPOS.erase(_ZPOS.begin() + i_Raw);
				_HADC.erase(_HADC.begin() + i_Raw);
				_Layer.erase(_Layer.begin() + i_Raw);
				_Chip.erase(_Chip.begin() + i_Raw);
				_Channel.erase(_Channel.begin() + i_Raw);
				i_Raw--;	
			}
		}
		i_Raw++;
	}
	
	//cout << "i_Raw : i_XZ_Raw : i_YZ_Raw " << i_Raw << " " << i_XZ_Raw << " " << i_YZ_Raw << endl; 
	lineXZ->SetParameter(0,averX);
	lineXZ->SetParameter(1,0);
	lineXZ->SetParLimits(0,averX-15, averX+15);
	lineXZ->SetParLimits(1, -0.1, 0.1);
	posXZ->Fit(lineXZ,"Q");
	double interceptXZ = lineXZ->GetParameter(0);
	double slopeXZ = lineXZ->GetParameter(1);
	lineYZ->SetParameter(0,averY);
	lineYZ->SetParameter(1,0);
	lineYZ->SetParLimits(0,averY-15, averY+15);
	lineYZ->SetParLimits(1, -0.1, 0.1);
	posYZ->Fit(lineYZ,"Q");
	double interceptYZ = lineYZ->GetParameter(0);
	double slopeYZ = lineYZ->GetParameter(1);


	//////////////////////////////////////////////////////
	// 					fit second time
	//////////////////////////////////////////////////////
	int i_Track = 0;
	int i_XZ_Track = 0;
	int i_YZ_Track = 0;
	//cout << "===============================================" << endl;
	//cout << "_LAYER : _ZPOS : _XPOS : resXZ : _YPOS : resYZ		" << endl;
	cycle = 0 ;
	double secondThre = 7.5;
	while (cycle < i_Raw) {
		cycle++;
		double fitValueXZ = interceptXZ + slopeXZ * _ZPOS.at(i_Track);
		double residualXZ = fitValueXZ - _XPOS.at(i_Track);
		double fitValueYZ = interceptYZ + slopeYZ * _ZPOS.at(i_Track);
		double residualYZ = fitValueYZ - _YPOS.at(i_Track);
		//cout << _Layer.at(i_Track);
		//cout << fixed << setprecision(1) << "	" << _ZPOS.at(i_Track) ;
		//cout << fixed << setprecision(1) << "	" << _XPOS.at(i_Track) ;
		//cout << fixed << setprecision(1) << "	" << residualXZ ;
		//cout << fixed << setprecision(1) << "	" << _YPOS.at(i_Track) ;
		//cout << fixed << setprecision(1) << "	" << residualYZ << endl ;
		int layer = _Layer.at(i_Track);
		if ( layer%2 == 1 && fabs(residualXZ) > secondThre ) { 
			//cout << "==== abnormal ====" << endl;
			posXZ->RemovePoint(i_XZ_Track);
			i_XZ_Track--;
			// cout << "Deleting ... " << fixed << setprecision(1) << " " <<_Layer.at(i_Track) << " " <<_ZPOS.at(i_Track) << " " <<_XPOS.at(i_Track) <<  " " <<_YPOS.at(i_Track) << endl; 
			_XPOS.erase(_XPOS.begin() + i_Track);
			_YPOS.erase(_YPOS.begin() + i_Track);
			_ZPOS.erase(_ZPOS.begin() + i_Track);
			// for (int i = 0; i< _ZPOS.size(); i++){cout << _ZPOS.at(i) <<"	";if(i%5==4) cout << endl;}cout<<endl;
			_HADC.erase(_HADC.begin() + i_Track);
			_Layer.erase(_Layer.begin() + i_Track);
			_Chip.erase(_Chip.begin() + i_Track);
			_Channel.erase(_Channel.begin() + i_Track);
			i_Track--;
		} 
		if ( layer%2 == 0 && fabs(residualYZ) > secondThre ) {
			//cout << "==== abnormal ====" << endl;
			posYZ->RemovePoint(i_YZ_Track);
			i_YZ_Track--;
			//cout << "Deleting ... " << fixed << setprecision(1) << " " <<_Layer.at(i_Track) << " " <<_ZPOS.at(i_Track) << " " <<_XPOS.at(i_Track) <<  " " <<_YPOS.at(i_Track) << endl; 
			_XPOS.erase(_XPOS.begin() + i_Track);
			_YPOS.erase(_YPOS.begin() + i_Track);
			_ZPOS.erase(_ZPOS.begin() + i_Track);
			// for (int i = 0; i< _ZPOS.size(); i++){cout << _ZPOS.at(i) <<"	";if(i%5==4) cout << endl;}cout<<endl;
			_HADC.erase(_HADC.begin() + i_Track);
			_Layer.erase(_Layer.begin() + i_Track);
			_Chip.erase(_Chip.begin() + i_Track);
			_Channel.erase(_Channel.begin() + i_Track);
			i_Track--;	
		}
		//if(_Layer.at(i_Track)==0&&_Channel.at(i_Track)==0) cout << "======== Now Entry : " << entry << " =========" << endl;
		if ( layer%2 == 1 ) { 
			i_XZ_Track++;
		} else {
			i_YZ_Track++;
		}
		i_Track++;
	}
	//for (size_t i = 0; i< _ZPOS.size(); i++){cout << _ZPOS.at(i) <<"		";if(i%5==4) cout << endl;}cout << endl;cout<<"============"<<endl;
	//cout << "i_XZ_Track : i_YZ_Track : i_Track " << i_XZ_Track << " " << i_YZ_Track << " " << i_Track << endl; 
	
	lineXZ->SetParameter(0,interceptXZ);
	lineXZ->SetParameter(1,0);
	lineXZ->SetParLimits(0,interceptXZ-15, interceptXZ+15);
	lineXZ->SetParLimits(1, -0.1, 0.1);
	posXZ->Fit(lineXZ,"Q");
	interceptXZ = lineXZ->GetParameter(0);
	slopeXZ = lineXZ->GetParameter(1);
	lineYZ->SetParameter(0,interceptYZ);
	lineYZ->SetParameter(1,0);
	lineYZ->SetParLimits(0,interceptYZ-15, interceptYZ+15);
	lineYZ->SetParLimits(1, -0.1, 0.1);
	posYZ->Fit(lineYZ,"Q");
	interceptYZ = lineYZ->GetParameter(0);
	slopeYZ = lineYZ->GetParameter(1);
	
	//////////////////////////////////////////////////////
	// 				fit third time
	//////////////////////////////////////////////////////
	int i_Valid = 0;
	int i_XZ_Valid = 0;
	int i_YZ_Valid = 0;
	//cout << "===============================================" << endl;
	//cout << "_LAYER : _ZPOS : _XPOS : resXZ : _YPOS : resYZ		" << endl;
	int allHitInOneEvent_Track = _ZPOS.size();
	cycle = 0 ;
	double thirdThre = 3;
	while (cycle < allHitInOneEvent_Track) {
		cycle++;
		double fitValueXZ = interceptXZ + slopeXZ * _ZPOS.at(i_Valid);
		double residualXZ = fitValueXZ - _XPOS.at(i_Valid);
		double fitValueYZ = interceptYZ + slopeYZ * _ZPOS.at(i_Valid);
		double residualYZ = fitValueYZ - _YPOS.at(i_Valid);
		//cout << _Layer.at(i_Valid);
		//cout << fixed << setprecision(1) << "	" << _ZPOS.at(i_Valid) ;
		//cout << fixed << setprecision(1) << "	" << _XPOS.at(i_Valid) ;
		//cout << fixed << setprecision(1) << "	" << residualXZ ;
		//cout << fixed << setprecision(1) << "	" << _YPOS.at(i_Valid) ;
		//cout << fixed << setprecision(1) << "	" << residualYZ << endl ;
		int layer = _Layer.at(i_Valid);
		if ( layer%2 == 1 && fabs(residualXZ) > thirdThre ) { 
			//cout << "==== abnormal ====" << endl;
			posXZ->RemovePoint(i_XZ_Valid);
			i_XZ_Valid--;
			//cout << "Deleting ... " << fixed << setprecision(1) << " " <<_Layer.at(i_Valid) << " " <<_ZPOS.at(i_Valid) << " " <<_XPOS.at(i_Valid) <<  " " <<_YPOS.at(i_Valid) << endl; 
			_XPOS.erase(_XPOS.begin() + i_Valid);
			_YPOS.erase(_YPOS.begin() + i_Valid);
			_ZPOS.erase(_ZPOS.begin() + i_Valid);
			//for(int i=0; i<_ZPOS.size(); i++){cout <<_ZPOS.at(i)<<" ";if(i%5==4) cout<<endl;}cout<<endl;
			_HADC.erase(_HADC.begin() + i_Valid);
			_Layer.erase(_Layer.begin() + i_Valid);
			_Chip.erase(_Chip.begin() + i_Valid);
			_Channel.erase(_Channel.begin() + i_Valid);
			i_Valid--;
		} 
		if ( layer%2 == 0 && fabs(residualYZ) > thirdThre ) {
			//cout << "==== abnormal ====" << endl;
			posYZ->RemovePoint(i_YZ_Valid);
			i_YZ_Valid--;
			//cout << "Deleting ... " << fixed << setprecision(1) << " " <<_Layer.at(i_Valid) << " " <<_ZPOS.at(i_Valid) << " " <<_XPOS.at(i_Valid) <<  " " <<_YPOS.at(i_Valid) << endl; 
			_XPOS.erase(_XPOS.begin() + i_Valid);
			_YPOS.erase(_YPOS.begin() + i_Valid);
			_ZPOS.erase(_ZPOS.begin() + i_Valid);
			_HADC.erase(_HADC.begin() + i_Valid);
			_Layer.erase(_Layer.begin() + i_Valid);
			_Chip.erase(_Chip.begin() + i_Valid);
			_Channel.erase(_Channel.begin() + i_Valid);
			i_Valid--;
		}
		//if(_Layer.at(i_Valid)==0&&_Channel.at(i_Valid)==0) cout << "======== Now Entry : " << entry << " =========" << endl;
		
		if ( layer%2 == 1 ) { 
			i_XZ_Valid++;
		} else {
			i_YZ_Valid++;
		}
		i_Valid++;
	}

	allHit += allHitInOneEvent;
	validHit += i_Valid;
	validHit2All = i_Valid / allHitInOneEvent;
	//cout << "i_XZ_Valid: i_YZ_Valid: i_Valid " << i_XZ_Valid << " " << i_YZ_Valid << " " << i_Valid << endl; 
	//cout << "===============================================" << endl;
	//if(entry%100000==0)
	lineXZ->SetParameter(0,interceptXZ);
	lineXZ->SetParameter(1,0);
	lineXZ->SetParLimits(0,interceptXZ-10, interceptXZ+10);
	lineXZ->SetParLimits(1, -0.1, 0.1);
	posXZ->Fit(lineXZ,"Q");
	interceptXZ = lineXZ->GetParameter(0);
	slopeXZ = lineXZ->GetParameter(1);
	//cout << "===== XZ FIT FINISH ! ======" << endl;
	
	lineYZ->SetParameter(0,interceptYZ);
	lineYZ->SetParameter(1,0);
	lineYZ->SetParLimits(0,interceptYZ-10, interceptYZ+10);
	lineYZ->SetParLimits(1, -0.1, 0.1);
	posYZ->Fit(lineYZ,"Q");
	interceptYZ = lineYZ->GetParameter(0);
	slopeYZ = lineYZ->GetParameter(1);
	//cout << "===== YZ FIT FINISH ! ======" << endl;
/*
	TCanvas *cXZ = new TCanvas(Form("cXZ_odd_%d",entry), Form("cXZ_odd_%d",entry) ,800,600);
	cXZ->cd();
	gPad->SetGridx();
	posXZ->SetTitle(Form("cXZ_odd_entry%d",entry));
	posXZ->GetXaxis()->SetRangeUser(0, 350);
	posXZ->GetYaxis()->SetRangeUser(-150, 150);
	posXZ->GetXaxis()->SetTitle("Z Direction (mm)");
	posXZ->GetYaxis()->SetTitle("X Direction (mm)");
	posXZ->GetYaxis()->SetTitleOffset(1);
	posXZ->Draw("AP");
	cXZ->Write();

	TCanvas *cYZ = new TCanvas(Form("cYZ_even_%d",entry), Form("cYZ_even_%d",entry),800,600);
	cYZ->cd();
	gPad->SetGridx();
	posYZ->SetTitle(Form("cYZ_even_entry%d",entry));
	posYZ->GetXaxis()->SetRangeUser(0, 350);
	posYZ->GetYaxis()->SetRangeUser(-150, 150);
	posYZ->GetXaxis()->SetTitle("Z Direction (mm)");
	posYZ->GetYaxis()->SetTitle("Y Direction (mm)");
	posYZ->GetYaxis()->SetTitleOffset(1);
	posYZ->Draw("AP");
	cYZ->Write();
	
	delete cXZ;
	delete cYZ;
*/
	delete lineYZ;
	delete lineXZ;
	delete posYZ;
	delete posXZ;
}


void processCali::Calibration(string inFileName, string outFileName, Extract & ex)
{
 	gStyle->SetOptFit(1111);
	int treeType = -1;
	treeType = TreeType(inFileName);	
    inFile = TFile::Open(TString(inFileName),"READ");
	if (treeType == 0) {
		inTree = (TTree*)inFile->Get("Raw_Hit");
	} else if (treeType == 1) {
		inTree = (TTree*)inFile->Get("Simu_Digi_Raw_Hit");
	} else {
		return ;
	}
	if (!inTree) {cout << "!!!!! NO INPUT TREE !!!!!" << endl;}

	int Entries = inTree->GetEntries();
    cout<<" [ Prepare to processCali : ] Total Entries : "<<Entries<<" "<<endl;
 	
	inTree->SetBranchAddress("Run_Num",&_run_num);
	inTree->SetBranchAddress("Event_Time",&_event_time);
	inTree->SetBranchAddress("TriggerID",&_triggerID);
	inTree->SetBranchAddress("CellID",&_cellID);
	inTree->SetBranchAddress("BCID",&_bcID);
	inTree->SetBranchAddress("HitTag",&_hitTag);
	inTree->SetBranchAddress("GainTag",&_gainTag);
	inTree->SetBranchAddress("HG_Charge",&_hg_charge);
	inTree->SetBranchAddress("LG_Charge",&_lg_charge);
	inTree->SetBranchAddress("Hit_Time",&_hit_time);
	inTree->SetBranchAddress("Temperature",&_tempLayer);

    outFile = new TFile(TString(outFileName),"RECREATE");
	if (treeType == 0) {
    	outTree = new TTree("Calib_Hit","after calibration");
	} else if (treeType == 1) {
    	outTree = new TTree("Simu_Digi_Calib_Hit","after calibration");
	}
	outTree->Branch("Run_Num",&_run_num_new);
	outTree->Branch("Event_Time",&_event_time_new);
	outTree->Branch("Event_Num",&_event_num);
	outTree->Branch("DetectorID",&_detectorID);
	outTree->Branch("CellID",&_cellID_new);
	outTree->Branch("Hit_Energy",&_hitE);
	outTree->Branch("Hit_X",&_posx);
	outTree->Branch("Hit_Y",&_posy);
	outTree->Branch("Hit_Z",&_posz);
	outTree->Branch("NewTemperature",&_temp);
	// ==============================================================================
    //                          Calibration signal 
    // ==============================================================================
	TH1D *Edep = new TH1D("Edep","Edep(MeV)",1000,0,5000);
	TH1I *HitLayerNo = new TH1I("HitLayerNo","HitLayerNo",LAYERNO,0,LAYERNO);
	TH1I *HitNo = new TH1I("HitNo","HitNo",750,0,1500);
	TH2I *HitMap = new TH2I("HitMap","HitMap",LAYERNO,0,LAYERNO,100,0,100);
	TProfile *hitpro = new TProfile("hitpro","Profile Layer HitNo",30,0,30);
	TProfile *hpro = new TProfile("hpro","Profile Layer Energy",30,0,30);
	//TH2D *LayerEdep = new TH2D("LayerEdep","Layer Energy",30,0,30,100,0,400);
	TH2D *LayerEdep = new TH2D("LayerEdep","Layer Energy",30,0,30,500,0,500);
	TH2D *HitNo2EnergyDep = new TH2D("HitNo2EnergyDep","HitNo2EnergyDep",750,0,3000,1000,0,1000);
	//TF1 *f1 = new TF1("f1","ROOT::Math::crystall_function(x,2,1,1,0)");
	TF1 *f1 = new TF1("f1","crystalball");

	for (int entry=0; entry < Entries; entry++) {
		if(entry%3!=2)  continue; // jiaxuan : test
        inTree->GetEntry(entry);
        if(entry%20000==0)   cout<<" [ Process : Calibration : ]  event : "<<entry<<" "<<endl;
		// Hit level data in one event
		DataClear();
		int whichLayer[LAYERNO] = {0};
		hitLayerNo = 0;
		hitCellNo = 0;
		for (size_t i_hit = 0; i_hit != _cellID->size(); ++i_hit)
		{
			if(_hitTag->at(i_hit)==0)	continue;
			if(_gainTag->at(i_hit)==0)	continue; // for auto gain muon data
			int layerID = _cellID->at(i_hit) / 1e5;
			if( layerID>=30 || layerID<0) continue;
			int chipID = (_cellID->at(i_hit) % 100000) / 1e4;
			int channelID = _cellID->at(i_hit) % 100;
			whichLayer[layerID] = 1;
			double *_position = EBUdecode(layerID,chipID,channelID);
			_XPOS.push_back(*_position);
			_YPOS.push_back(*(_position+1));
			_ZPOS.push_back(*(_position+2));
			_HADC.push_back(_hg_charge->at(i_hit));
			_Layer.push_back(layerID);
			_Chip.push_back(chipID);
			_Channel.push_back(channelID);

			for(int i_layer = 0; i_layer < LAYERNO; i_layer++) { hitLayerNo += whichLayer[i_layer]; }
			hitCellNo++;
		}
		if(hitCellNo > 60 || hitLayerNo < 20) continue;
		MuonTrackFit(entry);

		double EnergyDep = 0;
		double LayerEnergyDep[LAYERNO] = {0};
		int hitChannelNoPerEvent = 0;
		int hitNuPerLayer[LAYERNO]={0};//hit channel Number: on each layer
		int hitFlagForLayer[LAYERNO]={0};//whether this layer has hit
		int hitLayerNoPerEvent = 0;
		
		Reset();
		_run_num_new 	= _run_num;
		_event_time_new = _event_time;
		_event_num 		= _triggerID;
		_detectorID 	= 0;
		for (size_t i_hit = 0; i_hit != _XPOS.size(); ++i_hit) 
		{
			int layerID = _Layer.at(i_hit);
			int chipID = _Chip.at(i_hit);
			int channelID = _Channel.at(i_hit);
			double *_position = EBUdecode(layerID,chipID,channelID);
            double caliTime   = _HADC.at(i_hit);
			// reconstruction temperature distribution at each SiPM location
			// pedestal for each channel 
            caliTime   -= ex.pedMeanHigh[layerID][chipID][channelID];
			// MIP response calibration for Gain Mode
            caliTime   /= ex.MIPPeakValue[layerID][chipID][channelID];
			// to clarify HL-gain mode or auto-gain mode
			double hitenergy = caliTime*MIPEnergy ;//MeV
			_hitE.push_back(hitenergy);
			_cellID_new.push_back(layerID*1e5+chipID*1e4+channelID);
			_posx.push_back(*_position);
			_posy.push_back(*(_position+1));
			_posz.push_back(*(_position+2));

			EnergyDep += hitenergy ;
			LayerEnergyDep[layerID] += hitenergy;
			
			hitChannelNoPerEvent++;
			hitNuPerLayer[layerID]++;
			hitFlagForLayer[layerID] = 1;
		}
			
/*		for (size_t ihit = 0; ihit != _hitTag->size(); ++ihit) 
		{
            if(_hitTag->at(ihit)==0) continue;
			int _layerID = _cellID->at(ihit)/1e5;
            int _chipID	 = ( _cellID->at(ihit)%100000) / 1e4;
            int _chnID   = _cellID->at(ihit)%100;
			if( layerID>=30 || layerID<0) continue;
            if(_chipID==5 && _chnID>29) continue;// only 210 channels per layer
            
			double caliCharge = _lg_charge->at(ihit);
            double caliTime   = _hg_charge->at(ihit);
			// reconstruction temperature distribution at each SiPM location
			double *_position = EBUdecode(_layerID,_chipID,_chnID);
			//double SiPMtemp;
			//if (treeType == 0) {	
			//	if(_tempLayer->at(_layerID).size()!=0) {
			//		SiPMtemp = tempReconstruction(_layerID, _position, _tempLayer->at(_layerID));
			//	} else {
			//		SiPMtemp = 23;// SiPMTemp=20
			//	}
			// }
			// jiaxuan : temperature depedence correction
			// caliCharge = (1+(SiPMtemp-23)*0.03)*caliCharge;
            // caliTime = (1+(SiPMtemp-23)*0.03)*caliTime;
			
			// cout << "pedlow:	" << ex.pedMeanLow[_layerID][_chipID][_chnID]<< endl; 
			// cout << "pedhigh:	" << ex.pedMeanHigh[_layerID][_chipID][_chnID]<< endl; 
			// cout << "hlratio:	" << ex.HLRatio[_layerID][_chipID][_chnID]<< endl; 
			// cout << "MIPvalue:	" << ex.MIPPeakValue[_layerID][_chipID][_chnID]<< endl; 
			// cout << "ADCSwitch:	" << ex.HighADCSwitch[_layerID][_chipID][_chnID]<< endl; 

			// pedestal for each channel 
            caliCharge -= ex.pedMeanLow[_layerID][_chipID][_chnID];
            caliTime   -= ex.pedMeanHigh[_layerID][_chipID][_chnID];
            
			// jiaxuan :
			//if(caliTime<10 && _hit_time->at(ihit) < 0) continue; // exclude bug of SP2E of High Low Gain mode file

            // high-low conversion
            caliCharge *= ex.HLRatio[_layerID][_chipID][_chnID];
            //caliCharge = caliCharge*slopeTranFactor[_layerID][_chipID][_chnID] + interceptTranFactor[_layerID][_chipID][_chnID];

			// SiPM saturation effect
			// if(_layerID >=4 && _layerID <=27)// jiaxuan 
			// {
			//	caliCharge = SaturationCorrection(caliCharge,10);
			//	caliTime   = SaturationCorrection(caliTime,10);
            // }
			// else
			// {
			//	caliCharge = SaturationCorrection(caliCharge,15);
			//	caliTime   = SaturationCorrection(caliTime,15);
			// }

			// MIP response calibration for Gain Mode
            caliCharge /= ex.MIPPeakValue[_layerID][_chipID][_chnID];
            caliTime   /= ex.MIPPeakValue[_layerID][_chipID][_chnID];
			// to clarify HL-gain mode or auto-gain mode
			double hitenergy = 0;
			if (treeType==0) {
				if (_hit_time->at(ihit)< 0)
				{
					// cout << "Processing HL-gain-mode file now ... ..." << endl;
					hitenergy = _hg_charge->at(ihit)< ex.HighADCSwitch[_layerID][_chipID][_chnID] ? caliTime*MIPEnergy : caliCharge*MIPEnergy;//MeV
					_hitE.push_back(hitenergy);
				} else {
					// cout << "Processing auto-gain-mode file now ... ..." << endl;
					hitenergy = _lg_charge->at(ihit)==-1 ? caliTime*MIPEnergy : caliCharge*MIPEnergy;
					_hitE.push_back(hitenergy);	
				}
			}
			
			if (treeType == 1) {
				hitenergy = _lg_charge->at(ihit)==-1 ? caliTime*MIPEnergy : caliCharge*MIPEnergy;
				_hitE.push_back(hitenergy);	
			}
			
			_hitE.push_back(hitenergy);
			_cellID_new.push_back(_cellID->at(ihit));
			_posx.push_back(*_position);
			_posy.push_back(*(_position+1));
			_posz.push_back(*(_position+2));
            if (treeType == 0) _temp.push_back(SiPMtemp);

			EnergyDep += hitenergy ;
			LayerEnergyDep[_layerID] += hitenergy;
			
			hitChannelNoPerEvent++;
			hitNuPerLayer[_layerID]++;
			hitFlagForLayer[_layerID] = 1;
		}
*/		
		for(int i_layer=0; i_layer<LAYERNO; i_layer++)	
		{	
			HitMap->Fill(i_layer,hitNuPerLayer[i_layer]);
			hitLayerNoPerEvent += hitFlagForLayer[i_layer];
			LayerEdep->Fill(i_layer,LayerEnergyDep[i_layer]);
		}
		
		HitNo->Fill(hitChannelNoPerEvent);
		HitLayerNo->Fill(hitLayerNoPerEvent);
		outTree->Fill();
		Edep->Fill(EnergyDep);//exclude muon-like
		HitNo2EnergyDep->Fill(EnergyDep,hitChannelNoPerEvent);
    }
	
	//CrystallBall Fit 
	//double constant = Edep->GetBinContent(Edep->GetMaximumBin());
	//double mean = Edep->GetMean();
	//double sigma = Edep->GetRMS();
	//cout << constant << "	" << mean << "	" << sigma << endl;
	//f1->SetParameters(n,mu,sigma,alpha,N);
	//f1->SetParameters(100,mean,100,-(mean-50),constant);
	//f1->SetParLimits(0,0.8*constant,1.05*constant);
	//f1->SetParLimits(2, 50, 1000); // ????
	//f1->SetParLimits(2, 0.9*sigma , 1.1*sigma ); // ????
	//f1->SetParLimits(3, 30, 200);
	//f1->SetParLimits(4, 0.9*constant, 1.1*constant);// ????
	//f1->SetLineWidth(3);
	//Edep->Fit(f1,"","",0.7*mean,1.35*mean); // jiaxuan 
	//Edep->Fit(f1);
    //cout<<"Total Entries : "<<Entries<<" , Layer>=22 : "<<Entries_1<<" , Strips<=64 : "<<Entries_2<<endl;
    
	outFile->cd();
	
	Edep->SetLineWidth(2);
	Edep->Write();
	HitMap->Write();
	HitNo->Write();
	HitLayerNo->Write();
	HitNo2EnergyDep->Write();
	LayerEdep->Write();
	
	hitpro = HitMap->ProfileX();
	hitpro->Write();
	hpro = LayerEdep->ProfileX();
	hpro->Write();
    
	outTree->Write("",TObject::kOverwrite);
    outFile->Close();
    inFile->Close();
    cout<<" [ End of Calibration Process ]  "<<endl;
}


